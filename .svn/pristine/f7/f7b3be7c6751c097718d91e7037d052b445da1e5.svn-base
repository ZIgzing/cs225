/**
 * @file avltree.cpp
 * Definitions of the binary tree functions you'll be writing for this lab.
 * You'll need to modify this file.
 */

 #include "avltree.h"
 #include <cstdlib>
 #include <iostream>

 using namespace std;


template <class K, class V>
V AVLTree<K, V>::find(const K& key) const
{
    return find(root, key);
}

template <class K, class V>
V AVLTree<K, V>::find(Node* subtree, const K& key) const
{
    if (subtree == NULL)
        return V();
    else if (key == subtree->key)
        return subtree->value;
    else {
        if (key < subtree->key)
            return find(subtree->left, key);
        else
            return find(subtree->right, key);
    }
}

template <class K, class V>
void AVLTree<K, V>::rotateLeft(Node*& t)
{
    functionCalls.push_back("rotateLeft"); // Stores the rotation name (don't remove this)
    // passing a pointer,t, by reference;temp
    Node* temp = NULL;
    temp = t->right;
    t->right = temp->left;
    temp->left = t;
    t = temp;

    t->height = 1 + max(heightOrNeg1(temp->left), heightOrNeg1(temp->right)) ;
    t->left->height = 1 + max(heightOrNeg1(temp->left->left), heightOrNeg1(temp->right->right)) ;
    // update the height now;
}

template <class K, class V>
void AVLTree<K, V>::rotateLeftRight(Node*& t)
{
    functionCalls.push_back("rotateLeftRight"); // Stores the rotation name (don't remove this)
    // Implemented for you:
    rotateLeft(t->left);
    rotateRight(t);
}

template <class K, class V>
void AVLTree<K, V>::rotateRight(Node*& t)
{
    functionCalls.push_back("rotateRight"); // Stores the rotation name (don't remove this)
    // your code here
    Node* temp = NULL;
    temp = t->left;
    t->left = temp->right;
    temp->right = t;
    t = temp;

    t->height = 1 + max(heightOrNeg1(temp->left), heightOrNeg1(temp->right)) ;
    t->right->height = 1 + max(heightOrNeg1(temp->left), heightOrNeg1(temp->right)) ;
    // update the height now;
}

template <class K, class V>
void AVLTree<K, V>::rotateRightLeft(Node*& t)
{
    functionCalls.push_back("rotateRightLeft"); // Stores the rotation name (don't remove this)
    rotateRight(t->right);
    rotateLeft(t);
}

template <class K, class V>
void AVLTree<K, V>::rebalance(Node*& subtree)
{
   // your code here
    if(getBalanceFactor(subtree) < -1){
        rotateLeft(subtree);
    }
    if(getBalanceFactor(subtree) > 1){
        rotateRight(subtree);
    }
    return;
    //your code here
}

template <class K, class V>
void AVLTree<K, V>::insert(const K & key, const V & value)
{
    insert(root, key, value);
}

template <class K, class V>
void AVLTree<K, V>::insert(Node*& subtree, const K& key, const V& value)
{
    // base case , and recursive function call~~
    if(subtree == NULL){
      subtree = new Node(key,value);
    }
    else{
      if(key < subtree->key){
        insert(subtree->left, key, value);
        rebalance(subtree);

      }
      else if(key > subtree->key){
        insert(subtree->right, key, value);
        rebalance(subtree);
      }
    }
    // call rebanlance here, because whenever we insert, our height of the tree changes.
}

template <class K, class V>
void AVLTree<K, V>::remove(const K& key)
{
    remove(root, key);
}

template <class K, class V>
void AVLTree<K, V>::remove(Node*& subtree, const K& key)
{
    if (subtree == NULL)
        return;

    if (key < subtree->key) {
        // your code here
        subtree = subtree->left;
        delete subtree;
    } else if (key > subtree->key) {
        // your code here
        subtree = subtree->right;
        delete subtree;
    } else {
        if (subtree->left == NULL && subtree->right == NULL) {
            /* no-child remove */
            // your code here
            delete subtree;
        } else if (subtree->left != NULL && subtree->right != NULL) {
            Node* temp1;
            Node* temp2;
            temp1 = subtree->left;
            temp2 = subtree->right;
            delete temp1;
            delete temp2;
            delete subtree;
            temp1 = NULL;
            temp2 = NULL;
            subtree = NULL;
            /* two-child remove */
            // your code here
        } else {
            if(subtree->left != NULL){
              Node* temp;
              temp = subtree->left;
              delete temp;
              delete subtree;
              temp = NULL;
              subtree = NULL;
            }
            if(subtree->right != NULL){
              Node* temp;
              temp = subtree->right;
              delete temp;
              delete subtree;
              temp = NULL;
              subtree = NULL;
            }
            /* one-child remove */
            // your code here
        }
        // your code here
    }
}
